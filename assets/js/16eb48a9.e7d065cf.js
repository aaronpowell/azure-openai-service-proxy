"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[199],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},h="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=l(n),u=a,d=h["".concat(p,".").concat(u)]||h[u]||m[u]||r;return n?o.createElement(d,i(i({ref:t},c),{},{components:n})):o.createElement(d,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[h]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var o=n(7462),a=(n(7294),n(4137));const r={},i="Chat completions API",s={unversionedId:"raw-api-access/chat-completion",id:"raw-api-access/chat-completion",title:"Chat completions API",description:"The OpenAI proxy service chat completion endpoint is a REST API that generates a response to a user's prompt. Requests are forwarded to the Azure OpenAI service and the response is returned to the caller.",source:"@site/docs/80-raw-api-access/20-chat-completion.md",sourceDirName:"80-raw-api-access",slug:"/raw-api-access/chat-completion",permalink:"/azure-openai-service-proxy/raw-api-access/chat-completion",draft:!1,editUrl:"https://github.com/gloveboxes/azure-openai-service-proxy/tree/master/docs/docs/80-raw-api-access/20-chat-completion.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Endpoint access",permalink:"/azure-openai-service-proxy/raw-api-access/introduction"},next:{title:"Embeddings API",permalink:"/azure-openai-service-proxy/raw-api-access/embedding"}},p={},l=[{value:"Using the OpenAI SDK",id:"using-the-openai-sdk",level:2},{value:"Chat completion with Curl",id:"chat-completion-with-curl",level:2},{value:"Chat completion with Python and httpx",id:"chat-completion-with-python-and-httpx",level:2}],c={toc:l},h="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"chat-completions-api"},"Chat completions API"),(0,a.kt)("p",null,"The OpenAI proxy service chat completion endpoint is a REST API that generates a response to a user's prompt. Requests are forwarded to the Azure OpenAI service and the response is returned to the caller."),(0,a.kt)("h2",{id:"using-the-openai-sdk"},"Using the OpenAI SDK"),(0,a.kt)("p",null,"The event administrator will provide the:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"PROXY_ENDPOINT_URL")," - The URL of the OpenAI proxy service, eg ",(0,a.kt)("inlineCode",{parentName:"li"},"https://YOUR_OPENAI_PROXY_ENDPOINT/v1"),". The event administrator will provide the URL, note, the ",(0,a.kt)("inlineCode",{parentName:"li"},"/v1")," appended to the URL."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"EVENT_TOKEN")," is made up of two parts, the event code followed by your GitHub User Name, eg ",(0,a.kt)("inlineCode",{parentName:"li"},"hackathon/gloveboxes"),". The event code grants timebound access to the OpenAI APIs and models. The event code is typically the name of the event, eg ",(0,a.kt)("inlineCode",{parentName:"li"},"hackathon"),". The event administrator will provide the event code.")),(0,a.kt)("p",null,"The following example is from the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/examples")," folder and demonstrates how to use the OpenAI SDK to access the chat completion API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'""" Test Azure OpenAI Chat Completions API """\n\nimport os\nfrom dotenv import load_dotenv\nfrom openai import AzureOpenAI\n\nload_dotenv()\n\nENDPOINT_URL = os.environ.get("PROXY_ENDPOINT_URL")\nAPI_KEY = os.environ.get("EVENT_TOKEN")\nAPI_VERSION = "2023-09-01-preview"\n\n# gets the API Key from environment variable AZURE_OPENAI_API_KEY\nclient = AzureOpenAI(\n    azure_endpoint=ENDPOINT_URL,\n    api_key=API_KEY,\n    api_version=API_VERSION,\n)\n\nMESSAGES = [\n    {"role": "system", "content": "You are a helpful assistant."},\n    {"role": "user", "content": "Who won the world series in 2020?"},\n    {\n        "role": "assistant",\n        "content": "The Los Angeles Dodgers won the World Series in 2020.",\n    },\n    {"role": "user", "content": "Where was it played?"},\n]\n\n\ncompletion = client.chat.completions.create(\n    model="deployment-name",  # e.g. gpt-35-instant\n    messages=MESSAGES,\n)\n\nprint(completion.model_dump_json(indent=2))\nprint()\nprint(completion.choices[0].message.content)\n\n')),(0,a.kt)("h2",{id:"chat-completion-with-curl"},"Chat completion with Curl"),(0,a.kt)("p",null,"You can also use ",(0,a.kt)("inlineCode",{parentName:"p"},"curl")," to access the chat completion API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \\\n-H "openai-event-code: hackathon/githubuser" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    "max_tokens": 256,\n    "temperature": 1,\n    "messages": [\n        {\n            "role": "system",\n            "content": "You are an AI assistant that writes poems in the style of William Shakespeare."\n        },\n        {\n            "role": "user",\n            "content": "Write a poem about indian elephants"\n        }\n    ]\n}\' \\\nhttps://YOUR_OPENAI_PROXY_ENDPOINT/api/v1/chat/completions\n')),(0,a.kt)("p",null,"or pretty print the JSON response with ",(0,a.kt)("inlineCode",{parentName:"p"},"jq")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \\\n-H "openai-event-code: hackathon/githubuser" \\\n-H "Content-Type: application/json" \\\n-d \'{\n    "max_tokens": 256,\n    "temperature": 1,\n    "messages": [\n        {\n            "role": "system",\n            "content": "You are an AI assistant that writes poems in the style of William Shakespeare."\n        },\n        {\n            "role": "user",\n            "content": "Write a poem about indian elephants"\n        }\n    ]\n}\' \\\nhttps://YOUR_OPENAI_PROXY_ENDPOINT/api/v1/chat/completions | jq\n')),(0,a.kt)("h2",{id:"chat-completion-with-python-and-httpx"},"Chat completion with Python and httpx"),(0,a.kt)("p",null,"You can also call the OpenAI chat completion API using Python and the httpx library."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'request = {\n    "max_tokens": 256,\n    "temperature": 1,\n    "messages": [\n        {\n            "role": "system",\n            "content": "You are an AI assistant that writes poems in the style of William Shakespeare."\n        },\n        {\n            "role": "user",\n            "content": "Write a poem about indian elephants"\n        }\n    ]\n}\n\nurl = "https://YOUR_OPENAI_PROXY_ENDPOINT/api/v1/chat/completions"\n\nheaders = {"openai-event-code": hackathon/githubuser}\n\nresponse = httpx.post(url=url, headers=headers, json=request, timeout=30)\n\nif response.status_code == 200:\n    print(response.json())\n')))}m.isMDXComponent=!0}}]);